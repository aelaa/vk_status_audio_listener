// Generated by CoffeeScript 1.6.3
(function() {
  var addGroupItemToStroage, drawGroupItem, groupItems, removeGroupItemFromStorage,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  groupItems = [];

  addGroupItemToStroage = function(item, fn) {
    var callback;
    if (item) {
      if (fn && fn.success && typeof fn.success === "function") {
        callback = fn.success;
      } else {
        callback = function() {};
      }
      if (__indexOf.call(groupItems, item) < 0) {
        groupItems.push(item);
      }
      return chrome.storage.local.set({
        'group_items': groupItems
      }, callback);
    } else {
      if (fn && fn.error && typeof fn.error === "function") {
        return fn.error('item is undefined');
      }
    }
  };

  removeGroupItemFromStorage = function(item, fn) {
    var callback, itemIndex;
    if (item) {
      if (fn && fn.success && typeof fn.success === "function") {
        callback = fn.success;
      } else {
        callback = function() {};
      }
      itemIndex = groupItems.indexOf(item);
      groupItems.splice(itemIndex, 1);
      return chrome.storage.local.set({
        'group_items': groupItems
      }, callback);
    } else {
      if (fn && fn.error && typeof fn.error === "function") {
        return fn.error('item is undefined');
      }
    }
  };

  drawGroupItem = function(owner, response) {
    return owner.append($('<img />', {
      src: response.photo
    })).append($('<a />', {
      "class": 'header',
      href: "http://vk.com/" + response.screen_name,
      text: response.name
    })).append($('<button />', {
      "class": 'btn',
      name: 'removeGroupItem',
      text: 'Отписаться',
      'data-group': response.gid
    }));
  };

  $(document).on('click', 'button[name=removeGroupItem]', function(e) {
    var $self;
    $self = $(this);
    removeGroupItemFromStorage($(this).data('group'), {
      success: function() {
        return $self.parent().remove();
      }
    });
    return e.preventDefault();
  });

  $(document).on('click', 'button[name=saveGroupItem]', function(e) {
    var $loader, $pageUrl, $parent, $self, $status, shortName, url;
    $self = $(this);
    $parent = $self.parent();
    $loader = $parent.find('.loader');
    $loader.addClass('visible');
    $status = $parent.find('.status');
    $status.removeClass('visible');
    $pageUrl = $parent.find('[name=pageUrl]');
    url = $pageUrl.val();
    shortName = url.match(/vk.com\/(\w+)/);
    if (!shortName) {
      $status.text('Неверный формат ссылки').addClass('visible');
      $loader.removeClass('visible');
      return;
    }
    API.call('groups.getById', {
      gid: shortName[1]
    }, function(data) {
      if (!data.error) {
        return addGroupItemToStroage(data.response[0].gid, {
          success: function() {
            $pageUrl.remove();
            $self.remove();
            return drawGroupItem($parent, data.response[0]);
          }
        });
      } else {
        $status.text('Группа не найдена').addClass('visible');
        $loader.removeClass('visible');
      }
    });
    $loader.removeClass('visible');
    return e.preventDefault();
  });

  $(function() {
    $('#cleanGroupItems').click(function(e) {
      chrome.storage.local.remove('group_items', function() {
        return $('.item').remove();
      });
      return e.preventDefault();
    });
    $('#addGroupItem').click(function(e) {
      var $input;
      $input = $('<input />', {
        type: 'text',
        name: 'pageUrl',
        placeholder: 'Ссылка на группу'
      });
      $('<div />', {
        "class": 'item'
      }).append($input).append($('<button />', {
        "class": 'btn',
        name: 'saveGroupItem',
        text: 'Подписаться'
      })).append($('<div />', {
        "class": 'loader'
      })).appendTo($('.option-items'));
      $input.focus();
      return e.preventDefault();
    });
    $('#authBtn').click(function(e) {
      chrome.runtime.sendMessage({
        action: "vk_notification_auth"
      }, function(response) {
        if (response.content === 'OK') {
          $('.authActions').hide();
          return $('.option-items, #addGroupItem').show();
        }
      });
      return e.preventDefault();
    });
    chrome.storage.local.get({
      'vkaccess_token': {}
    }, function(items) {
      if (items.vkaccess_token.length === void 0) {
        $('.authActions').show();
        $('.option-items, #addGroupItem').hide();
      }
    });
    return chrome.storage.local.get({
      'group_items': []
    }, function(items) {
      var item, _i, _len, _results;
      groupItems = items.group_items;
      _results = [];
      for (_i = 0, _len = groupItems.length; _i < _len; _i++) {
        item = groupItems[_i];
        _results.push(API.call('groups.getById', {
          gid: item
        }, function(data) {
          var $parent;
          if (!data.error) {
            $parent = $('<div />', {
              "class": 'item'
            });
            $('.option-items').append($parent);
            return drawGroupItem($parent, data.response[0]);
          }
        }));
      }
      return _results;
    });
  });

}).call(this);
