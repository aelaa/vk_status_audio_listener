// Generated by CoffeeScript 1.6.3
(function() {
  var displayAnError, getUrlParameterValue, listenerHandler, loadByUrl, processData;

  loadByUrl = function(url) {
    return $.ajax({
      url: url,
      dataType: 'json'
    });
  };

  processData = function(data) {
    var result;
    result = _.flatten(_.map(data, function(requests) {
      return _.rest(requests[0].response);
    }));
    return _.sortBy(result, function(item) {
      return -item.date;
    });
  };

  displayAnError = function(textToShow, errorToShow) {
    return alert(textToShow + '\n' + errorToShow);
  };

  getUrlParameterValue = function(url, parameterName) {
    var param, parameterValue, temp, urlParameters, _i, _len;
    urlParameters = url.substr(url.indexOf("#") + 1);
    parameterValue = "";
    urlParameters = urlParameters.split("&");
    for (_i = 0, _len = urlParameters.length; _i < _len; _i++) {
      param = urlParameters[_i];
      temp = param.split("=");
      if (temp[0] === parameterName) {
        return temp[1];
      }
    }
    return parameterValue;
  };

  listenerHandler = function(authenticationTabId) {
    var tabUpdateListener;
    return tabUpdateListener = function(tabId, changeInfo) {
      var vkAccessToken, vkAccessTokenExpiredFlag;
      if (tabId === authenticationTabId && changeInfo.url !== void 0 && changeInfo.status === "loading") {
        if (changeInfo.url.indexOf('oauth.vk.com/blank.html') > -1) {
          authenticationTabId = null;
          chrome.tabs.onUpdated.removeListener(tabUpdateListener);
          vkAccessToken = getUrlParameterValue(changeInfo.url, 'access_token');
          if (vkAccessToken === void 0 || vkAccessToken.length === void 0) {
            displayAnError('vk auth response problem', 'access_token length = 0 or vkAccessToken == undefined');
            return;
          }
          vkAccessTokenExpiredFlag = Number(getUrlParameterValue(changeInfo.url, 'expires_in'));
          if (vkAccessTokenExpiredFlag !== 0) {
            displayAnError('vk auth response problem', 'vkAccessTokenExpiredFlag != 0' + vkAccessToken);
            return;
          }
          return chrome.storage.local.set({
            'vkaccess_token': vkAccessToken
          }, function() {
            return chrome.tabs.remove(tabId);
          });
        }
      }
    };
  };

  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    var vkAuthenticationUrl, vkClientId, vkRequestedScopes;
    if (request.action === "vk_notification_auth") {
      vkClientId = '3696318';
      vkRequestedScopes = 'wall,offline';
      vkAuthenticationUrl = "https://oauth.vk.com/authorize?client_id=" + vkClientId + "&scope=" + vkRequestedScopes + "&redirect_uri=http%3A%2F%2Foauth.vk.com%2Fblank.html&display=page&response_type=token";
      chrome.tabs.create({
        url: vkAuthenticationUrl,
        selected: true
      }, function(tab) {
        return chrome.tabs.onUpdated.addListener(listenerHandler(tab.id));
      });
      sendResponse({
        content: "OK"
      });
    }
    if (request.action === "noification_list") {
      chrome.storage.local.get({
        'group_items': []
      }, function(items) {
        var item, requestPromisses, _i, _len, _ref;
        if (items.group_items) {
          requestPromisses = [];
          _ref = items.group_items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            requestPromisses.push(loadByUrl(API.requestUrl('wall.get', {
              owner_id: "-" + item,
              count: 15,
              access_token: request.token
            })));
          }
          return $.when.all(requestPromisses).then(function(schemas) {
            return sendResponse({
              content: 'OK',
              data: processData(schemas)
            });
          });
        } else {
          return sendResponse({
            content: 'EMPTY_GROUP_ITEMS'
          });
        }
      });
    }
    return true;
  });

}).call(this);
